//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputAction/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""f14dd93b-c118-4f28-b6ec-ab58044b5e09"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Value"",
                    ""id"": ""8a954d10-ba2c-4655-b5f6-63e39c91d6b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Skill"",
                    ""type"": ""Value"",
                    ""id"": ""7f91599c-340c-457c-a1bd-3b20ccf47dc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""B1"",
                    ""type"": ""Button"",
                    ""id"": ""cae78edb-aab0-4ae4-8bbe-8b840269950f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B2"",
                    ""type"": ""Button"",
                    ""id"": ""a6263ae9-a12c-45e4-84d7-e5acd2af7d2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B3"",
                    ""type"": ""Button"",
                    ""id"": ""9906ff01-4995-4d42-aa1a-2bfddf6a8030"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Button"",
                    ""id"": ""3f87480d-00d5-4717-9317-90396fedca9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""93f81fcc-7969-4c20-9897-a52418251cf2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fa8ce57-8e09-4aaa-9241-3aab30d46d8a"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f824dec6-528e-4467-aaef-fe2c332d88a4"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""B1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d484cae-0791-4d46-bb72-ba7302ae51e7"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""B2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10342097-5f07-4732-9450-de913036a868"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player"",
                    ""action"": ""B3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""573510e2-abdf-4d39-b2e6-a1056ea9edfd"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""33f65635-bd2f-4f63-9f08-8a4dc5d06054"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""9b3acbec-9723-43cd-a6db-25a9c0ce502b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InvenOnOff"",
                    ""type"": ""Button"",
                    ""id"": ""dc52e7b9-a2bf-4cb9-ae68-84d73d14de10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d5a106fe-0762-471c-b7aa-df48db294edb"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e52de8d4-23e2-4358-be70-6fdcf0d11f69"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InvenOnOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Test"",
            ""id"": ""9d1a543f-310b-40d9-96dc-3f2e23510ccd"",
            ""actions"": [
                {
                    ""name"": ""Test_1"",
                    ""type"": ""Button"",
                    ""id"": ""6c3ac720-c362-4bf7-a96c-7946a2153592"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_2"",
                    ""type"": ""Button"",
                    ""id"": ""9ef614cf-deee-42a3-af9a-265a58165662"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_3"",
                    ""type"": ""Button"",
                    ""id"": ""a4aac425-dbc9-4a9c-809a-e4282f096568"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_4"",
                    ""type"": ""Button"",
                    ""id"": ""e58f567f-66e2-49a8-ae52-1c1d20e7b687"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Test_5"",
                    ""type"": ""Button"",
                    ""id"": ""59e71882-66d9-4e6c-be80-2de8637b6766"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""318bc683-9050-47d4-9120-c9a25a46785d"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0dab9f41-c81b-498b-8272-3640f04bb29a"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23578f0b-ac3e-4264-accf-7f4328feb152"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b10b8368-6f3e-41f2-955f-8939ac68a9dd"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2ee293c-4b5b-435a-9e6a-643553c00f0c"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Test_5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player"",
            ""bindingGroup"": ""Player"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_Skill = m_Player.FindAction("Skill", throwIfNotFound: true);
        m_Player_B1 = m_Player.FindAction("B1", throwIfNotFound: true);
        m_Player_B2 = m_Player.FindAction("B2", throwIfNotFound: true);
        m_Player_B3 = m_Player.FindAction("B3", throwIfNotFound: true);
        m_Player_Mouse = m_Player.FindAction("Mouse", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_InvenOnOff = m_UI.FindAction("InvenOnOff", throwIfNotFound: true);
        // Test
        m_Test = asset.FindActionMap("Test", throwIfNotFound: true);
        m_Test_Test_1 = m_Test.FindAction("Test_1", throwIfNotFound: true);
        m_Test_Test_2 = m_Test.FindAction("Test_2", throwIfNotFound: true);
        m_Test_Test_3 = m_Test.FindAction("Test_3", throwIfNotFound: true);
        m_Test_Test_4 = m_Test.FindAction("Test_4", throwIfNotFound: true);
        m_Test_Test_5 = m_Test.FindAction("Test_5", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_Skill;
    private readonly InputAction m_Player_B1;
    private readonly InputAction m_Player_B2;
    private readonly InputAction m_Player_B3;
    private readonly InputAction m_Player_Mouse;
    public struct PlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public PlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @Skill => m_Wrapper.m_Player_Skill;
        public InputAction @B1 => m_Wrapper.m_Player_B1;
        public InputAction @B2 => m_Wrapper.m_Player_B2;
        public InputAction @B3 => m_Wrapper.m_Player_B3;
        public InputAction @Mouse => m_Wrapper.m_Player_Mouse;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Skill.started += instance.OnSkill;
            @Skill.performed += instance.OnSkill;
            @Skill.canceled += instance.OnSkill;
            @B1.started += instance.OnB1;
            @B1.performed += instance.OnB1;
            @B1.canceled += instance.OnB1;
            @B2.started += instance.OnB2;
            @B2.performed += instance.OnB2;
            @B2.canceled += instance.OnB2;
            @B3.started += instance.OnB3;
            @B3.performed += instance.OnB3;
            @B3.canceled += instance.OnB3;
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Skill.started -= instance.OnSkill;
            @Skill.performed -= instance.OnSkill;
            @Skill.canceled -= instance.OnSkill;
            @B1.started -= instance.OnB1;
            @B1.performed -= instance.OnB1;
            @B1.canceled -= instance.OnB1;
            @B2.started -= instance.OnB2;
            @B2.performed -= instance.OnB2;
            @B2.canceled -= instance.OnB2;
            @B3.started -= instance.OnB3;
            @B3.performed -= instance.OnB3;
            @B3.canceled -= instance.OnB3;
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_InvenOnOff;
    public struct UIActions
    {
        private @PlayerInputAction m_Wrapper;
        public UIActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputAction @InvenOnOff => m_Wrapper.m_UI_InvenOnOff;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @InvenOnOff.started += instance.OnInvenOnOff;
            @InvenOnOff.performed += instance.OnInvenOnOff;
            @InvenOnOff.canceled += instance.OnInvenOnOff;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @InvenOnOff.started -= instance.OnInvenOnOff;
            @InvenOnOff.performed -= instance.OnInvenOnOff;
            @InvenOnOff.canceled -= instance.OnInvenOnOff;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Test
    private readonly InputActionMap m_Test;
    private List<ITestActions> m_TestActionsCallbackInterfaces = new List<ITestActions>();
    private readonly InputAction m_Test_Test_1;
    private readonly InputAction m_Test_Test_2;
    private readonly InputAction m_Test_Test_3;
    private readonly InputAction m_Test_Test_4;
    private readonly InputAction m_Test_Test_5;
    public struct TestActions
    {
        private @PlayerInputAction m_Wrapper;
        public TestActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Test_1 => m_Wrapper.m_Test_Test_1;
        public InputAction @Test_2 => m_Wrapper.m_Test_Test_2;
        public InputAction @Test_3 => m_Wrapper.m_Test_Test_3;
        public InputAction @Test_4 => m_Wrapper.m_Test_Test_4;
        public InputAction @Test_5 => m_Wrapper.m_Test_Test_5;
        public InputActionMap Get() { return m_Wrapper.m_Test; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestActions set) { return set.Get(); }
        public void AddCallbacks(ITestActions instance)
        {
            if (instance == null || m_Wrapper.m_TestActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestActionsCallbackInterfaces.Add(instance);
            @Test_1.started += instance.OnTest_1;
            @Test_1.performed += instance.OnTest_1;
            @Test_1.canceled += instance.OnTest_1;
            @Test_2.started += instance.OnTest_2;
            @Test_2.performed += instance.OnTest_2;
            @Test_2.canceled += instance.OnTest_2;
            @Test_3.started += instance.OnTest_3;
            @Test_3.performed += instance.OnTest_3;
            @Test_3.canceled += instance.OnTest_3;
            @Test_4.started += instance.OnTest_4;
            @Test_4.performed += instance.OnTest_4;
            @Test_4.canceled += instance.OnTest_4;
            @Test_5.started += instance.OnTest_5;
            @Test_5.performed += instance.OnTest_5;
            @Test_5.canceled += instance.OnTest_5;
        }

        private void UnregisterCallbacks(ITestActions instance)
        {
            @Test_1.started -= instance.OnTest_1;
            @Test_1.performed -= instance.OnTest_1;
            @Test_1.canceled -= instance.OnTest_1;
            @Test_2.started -= instance.OnTest_2;
            @Test_2.performed -= instance.OnTest_2;
            @Test_2.canceled -= instance.OnTest_2;
            @Test_3.started -= instance.OnTest_3;
            @Test_3.performed -= instance.OnTest_3;
            @Test_3.canceled -= instance.OnTest_3;
            @Test_4.started -= instance.OnTest_4;
            @Test_4.performed -= instance.OnTest_4;
            @Test_4.canceled -= instance.OnTest_4;
            @Test_5.started -= instance.OnTest_5;
            @Test_5.performed -= instance.OnTest_5;
            @Test_5.canceled -= instance.OnTest_5;
        }

        public void RemoveCallbacks(ITestActions instance)
        {
            if (m_Wrapper.m_TestActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestActions instance)
        {
            foreach (var item in m_Wrapper.m_TestActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestActions @Test => new TestActions(this);
    private int m_PlayerSchemeIndex = -1;
    public InputControlScheme PlayerScheme
    {
        get
        {
            if (m_PlayerSchemeIndex == -1) m_PlayerSchemeIndex = asset.FindControlSchemeIndex("Player");
            return asset.controlSchemes[m_PlayerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnSkill(InputAction.CallbackContext context);
        void OnB1(InputAction.CallbackContext context);
        void OnB2(InputAction.CallbackContext context);
        void OnB3(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnInvenOnOff(InputAction.CallbackContext context);
    }
    public interface ITestActions
    {
        void OnTest_1(InputAction.CallbackContext context);
        void OnTest_2(InputAction.CallbackContext context);
        void OnTest_3(InputAction.CallbackContext context);
        void OnTest_4(InputAction.CallbackContext context);
        void OnTest_5(InputAction.CallbackContext context);
    }
}
